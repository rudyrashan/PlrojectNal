import os
import sqlite3
import random
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∏ —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ –∏–∑ processing.py
from processing import router as processing_router, start_processing
dp.include_router(processing_router)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite
conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    start_date TEXT,
    credit_balance INTEGER DEFAULT 100000,
    available_balance INTEGER DEFAULT 0,
    status TEXT DEFAULT '–ù–æ–≤–∏—á–æ–∫',
    processing_count INTEGER DEFAULT 0
)
""")
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é)
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"), KeyboardButton(text="üíª –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton(text="üí∏ –ù–∞—á–∞—Ç—å –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥"), KeyboardButton(text="üß∞ FAQ")]
    ],
    resize_keyboard=True
)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ FAQ
inline_main_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üíª –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet"),
            InlineKeyboardButton(text="üí∏ –ù–∞—á–∞—Ç—å –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥", callback_data="start_processing")
        ],
        [InlineKeyboardButton(text="üß∞ FAQ", callback_data="faq")]
    ]
)

faq_inline_buttons = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="main_menu"),
            InlineKeyboardButton(text="üíª –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")
        ],
        [InlineKeyboardButton(text="üí∏ –ù–∞—á–∞—Ç—å –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥", callback_data="start_processing")]
    ]
)

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ë–î

def generate_random_username():
    adjectives = ['fast', 'cool', 'brave', 'silent', 'wild', 'crazy']
    nouns = ['fox', 'tiger', 'eagle', 'panther', 'shark', 'lion']
    return f"#{random.choice(adjectives)}_{random.choice(nouns)}{random.randint(100, 999)}"

def get_display_name(user: types.User):
    return f"@{user.username}" if user.username else generate_random_username()

def register_user(user: types.User):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user.id,))
    if not cursor.fetchone():
        cursor.execute(
            "INSERT INTO users (user_id, username, start_date) VALUES (?, ?, ?)",
            (user.id, user.username or "", datetime.now().isoformat())
        )
        conn.commit()

def complete_processing(user_id: int):
    cursor.execute("SELECT processing_count, credit_balance, status FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result is None:
        return 0, "–ù–æ–≤–∏—á–æ–∫", 100000
    current_count, current_limit, current_status = result
    current_count += 1

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç –ø–æ –Ω–æ–≤–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–æ–≤
    if current_count >= 20:
        new_status = "–ö–ò–¢"
        credit_limit = 1_000_000
    elif current_count >= 10:
        new_status = "–ü—Ä–æ"
        credit_limit = 500_000
    elif current_count >= 5:
        new_status = "–°—Ç–∞—Ä—Ç–µ—Ä"
        credit_limit = 200_000
    else:
        new_status = "–ù–æ–≤–∏—á–æ–∫"
        credit_limit = 100_000

    # –ù–∞—á–∏—Å–ª—è–µ–º 10% –æ—Ç –ª–∏–º–∏—Ç–∞
    earned = int(credit_limit * 0.10)

    cursor.execute("""
        UPDATE users
        SET processing_count = ?,
            status = ?,
            credit_balance = ?,
            available_balance = available_balance + ?
        WHERE user_id = ?
    """, (current_count, new_status, credit_limit, earned, user_id))
    conn.commit()

    return earned, new_status, credit_limit

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã

@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    register_user(message.from_user)
    await button_main_menu(message)

@dp.message(Text(text="üè† –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é"))
async def button_main_menu(message: types.Message):
    register_user(message.from_user)
    display_name = get_display_name(message.from_user)
    text = (
        f"*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {display_name}!*\n\n"
        "–û–û–û ¬´OBNAL MSC¬ª ‚Äî –ø—Ä–∏–∑–Ω–∞–Ω–Ω—ã–π –ª–∏–¥–µ—Ä —Ä—ã–Ω–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞. "
        "–£ –Ω–∞—Å —Å–∞–º—ã–µ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤, –∏ —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ. "
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π M5 Competition ‚Äî —Ç—ã –ø–æ–ø–∞–ª —Ç–æ—á–Ω–æ –≤ —Ü–µ–ª—å. üéØ\n\n"
        "–ò–∑—É—á–∏ FAQ –∏ –Ω–∞—á–∏–Ω–∞–π —Å–≤–æ–π –ø—É—Ç—å –∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–≤–æ–±–æ–¥–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è! üëä\n"
        "_¬´–ü—Ä–æ—â–µ —á–µ–º —Å –Ω–∞–º–∏ - —Ç—ã –Ω–∏–≥–¥–µ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—à—å..¬ª_"
    )
    photo = FSInputFile("image.png")
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo,
        caption=text,
        parse_mode="Markdown",
        reply_markup=inline_main_menu
    )

async def show_personal_cabinet(source: types.Message | types.CallbackQuery):
    if isinstance(source, types.CallbackQuery):
        user = source.from_user
        chat_id = source.message.chat.id
    else:
        user = source.from_user
        chat_id = source.chat.id

    register_user(user)
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user.id,))
    row = cursor.fetchone()

    if not row:
        await source.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    display_name = get_display_name(user)
    start_date = datetime.fromisoformat(row[2])
    days = (datetime.now() - start_date).days + 1

    caption = (
        f"–í–∞—à –Ω–∏–∫–Ω–µ–π–º ‚Äî {display_name}\n"
        f"–í–∞—à —Å—Ç–∞–∂ –≤ –ø—Ä–æ–µ–∫—Ç–µ ‚Äî {days} –¥–Ω.\n"
        f"–í–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å ‚Äî {row[3]:,}‚ÇΩ\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–π –≤—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞ ‚Äî {row[4]:,}‚ÇΩ\n"
        f"–í–∞—à —Å—Ç–∞—Ç—É—Å ‚Äî {row[5]}\n\n"
        "–¢—ã —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Å–≤–æ–µ–≥–æ –ø—É—Ç–∏.\n\n"
        "üí¨ ¬´–°–µ–∫—Ä–µ—Ç —É—Å–ø–µ—Ö–∞ ‚Äî –Ω–∞—á–∞—Ç—å. –°–µ–∫—Ä–µ—Ç –Ω–∞—á–∞–ª–∞ ‚Äî —Ä–∞–∑–±–∏—Ç—å —Å–ª–æ–∂–Ω–æ–µ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.¬ª"
    )
    photo = FSInputFile("image2.png")
    inline_buttons = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é", callback_data="main_menu"),
                InlineKeyboardButton(text="üß∞ FAQ", callback_data="faq")
            ],
            [InlineKeyboardButton(text="üí∏ –ù–∞—á–∞—Ç—å –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥", callback_data="start_processing")]
        ]
    )
    await bot.send_photo(
        chat_id=chat_id,
        photo=photo,
        caption=caption,
        reply_markup=inline_buttons
    )

@dp.message(Text(text="üíª –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç"))
async def button_personal_cabinet(message: types.Message):
    await show_personal_cabinet(message)

@dp.callback_query(Text(text="personal_cabinet"))
async def inline_personal_cabinet_callback(callback: types.CallbackQuery):
    await show_personal_cabinet(callback)
    await callback.answer()

@dp.callback_query(Text(text="start_processing"))
async def inline_start_processing_callback(callback: types.CallbackQuery):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ –∏–∑ processing.py
    await start_processing(callback.message)
    await callback.answer()

@dp.message(Text(text="üß∞ FAQ"))
async def button_faq(message: types.Message):
    photo = FSInputFile("image3.png")
    caption = (
        "üß∞ *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
        "1. *–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å?*\n"
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—â–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ ‚Äî –Ω–∏–∫–∞–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.\n\n"
        "2. *–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤?*\n"
        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç –æ–±–Ω–∞–ª–∏—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã. –í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫.\n\n"
        "3. *–ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?*\n"
        "–ù–∏–∫–∞–∫–∏—Ö. –í—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏–±—ã–ª—å.\n\n"
        "–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @rudyzao"
    )
    await bot.send_photo(
        chat_id=message.chat.id,
        photo=photo,
        caption=caption,
        parse_mode="Markdown",
        reply_markup=faq_inline_buttons
    )

@dp.callback_query(Text(text="faq"))
async def faq_callback(callback: types.CallbackQuery):
    photo = FSInputFile("image3.png")
    caption = (
        "üß∞ *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:*\n\n"
        "1. *–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å?*\n"
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—â–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ ‚Äî –Ω–∏–∫–∞–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.\n\n"
        "2. *–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤?*\n"
        "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 10% –æ—Ç –æ–±–Ω–∞–ª–∏—á–µ–Ω–Ω–æ–π —Å—É–º–º—ã. –í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫.\n\n"
        "3. *–ö–∞–∫–∏–µ —Ä–∏—Å–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç?*\n"
        "–ù–∏–∫–∞–∫–∏—Ö. –í—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏–±—ã–ª—å.\n\n"
        "–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @rudyzao"
    )
    await bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=photo,
        caption=caption,
        parse_mode="Markdown",
        reply_markup=faq_inline_buttons
    )
    await callback.answer()

@dp.callback_query(Text(text="main_menu"))
async def inline_main_menu_callback(callback: types.CallbackQuery):
    await button_main_menu(callback.message)
    await callback.answer()

# –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ —Å –ø–æ—à–∞–≥–æ–≤—ã–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("process_"))
async def processing_steps(callback: types.CallbackQuery):
    platform = callback.data.split("_")[1]  # platform: "1win", "dragon" –∏–ª–∏ "vavada"
    await callback.answer()  # –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ

    msg = await callback.message.answer(f"üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform.upper()}...")

    steps = [
        "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É...",
        "üì° –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...",
        "üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...",
        "üìä –ü–æ–∏—Å–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...",
        "üí∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
        "üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–Ω–∫–æ–º...",
        "‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
    ]
    # –ó–∞–¥–∞—ë–º —Å–ª—É—á–∞–π–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞ –æ—Ç 5 –¥–æ 10 –º–∏–Ω—É—Ç (300-600 —Å–µ–∫—É–Ω–¥)
    total_duration = random.randint(300, 600)
    delay_per_step = total_duration // len(steps)

    for step in steps:
        await msg.edit_text(step)
        await asyncio.sleep(delay_per_step)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥: –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, –Ω–∞—á–∏—Å–ª—è–µ–º 10% –æ—Ç –ª–∏–º–∏—Ç–∞
    user_id = callback.from_user.id
    earned, new_status, credit_limit = complete_processing(user_id)

    finish_text = (
        f"üéâ –ü—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!\n"
        f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: {earned:,}‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å.\n"
        f"üèÜ –í–∞—à —Å—Ç–∞—Ç—É—Å: {new_status}\n"
        f"üí≥ –í–∞—à –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –ª–∏–º–∏—Ç —Ç–µ–ø–µ—Ä—å: {credit_limit:,}‚ÇΩ\n"
        f"üìÜ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:"
    )
    await msg.edit_text(finish_text)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    next_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ –ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥", callback_data="start_processing")],
            [InlineKeyboardButton(text="üíª –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç", callback_data="personal_cabinet")]
        ]
    )
    await callback.message.answer("‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=next_keyboard)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())